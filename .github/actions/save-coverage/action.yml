name: "Save Coverage Artifacts"
description: "Guarda los reportes de cobertura en la rama de artefactos"

inputs:
  gh-token:
    description: "GitHub Token para poder pushear a la rama de artefactos"
    required: true
  artifacts-branch:
    description: "Nombre de la rama donde se subir√°n los artefactos (reportes de cobertura, etc.)"
    required: false
    default: "artifacts"
  coverage-source:
    description: "Ruta relativa al workspace donde se encuentran los reportes, o si is-artifact es true, nombre (o ruta) del archivo ZIP"
    required: false
    default: "coverage-reports"
  is-artifact:
    description: "Si es true, indica que el reporte viene de un artifact y se debe descargar; en caso contrario se copiar√° la carpeta directamente"
    required: false
    default: "false"

runs:
  using: "composite"
  steps:
    # ----------------------------------------------------------------------------------------
    # Paso 1: Hacer checkout del c√≥digo en la carpeta "action-repo"
    # ----------------------------------------------------------------------------------------
    - name: "Checkout code"
      uses: actions/checkout@v3
      with:
        path: "action-repo"

    # ----------------------------------------------------------------------------------------
    # Paso 2A (si is-artifact es true): Descargar el artifact de cobertura
    # ----------------------------------------------------------------------------------------
    - name: "Descargar artifact de cobertura"
      if: ${{ inputs.is-artifact == 'true' }}
      uses: actions/download-artifact@v4
      with:
        name: ${{ inputs.coverage-source }}
        path: downloaded-coverage

    # ----------------------------------------------------------------------------------------
    # Paso 2B: Verificar el contenido de la cobertura
    #     - Si is-artifact es true se revisa "downloaded-coverage".
    #     - Si is-artifact es false se revisa el folder "coverage-source" directamente.
    # ----------------------------------------------------------------------------------------
    - name: "Verificar artifact descargado de cobertura"
      if: ${{ inputs.is-artifact == 'true' }}
      shell: bash
      env:
        WORKSPACE_PATH: ${{ github.workspace }}
      run: |
        set -e
        echo "‚ñ∂Ô∏è Verificando artifact descargado..."
        cd "${WORKSPACE_PATH}/downloaded-coverage"
        if [ ! "$(ls -A .)" ]; then
          echo "‚ùå Error: La carpeta 'downloaded-coverage' est√° vac√≠a."
          exit 1
        fi
        echo "‚úÖ Artifact descargado y contiene archivos. Listando contenido:"
        ls -lahR .
        echo "REPORTS_PATH=${WORKSPACE_PATH}/downloaded-coverage" >> "$GITHUB_ENV"

    - name: "Verificar carpeta de cobertura"
      if: ${{ inputs.is-artifact != 'true' }}
      shell: bash
      env:
        WORKSPACE_PATH: ${{ github.workspace }}
        REPORTS_PATH: ${{ inputs.coverage-source }}
      run: |
        set -e
        echo "‚ñ∂Ô∏è Verificando la carpeta de cobertura..."
        cd "${WORKSPACE_PATH}"
        echo "üîç Revisando la carpeta '${REPORTS_PATH}' en '${WORKSPACE_PATH}'"
        if [ ! -d "${REPORTS_PATH}" ]; then
          echo "‚ùå Error: La carpeta '${WORKSPACE_PATH}/${REPORTS_PATH}' no existe."
          exit 1
        fi
        FILE_COUNT=$(find "${REPORTS_PATH}" | wc -l)
        if [ "${FILE_COUNT}" -le 1 ]; then
          echo "‚ùå Error: La carpeta '${WORKSPACE_PATH}/${REPORTS_PATH}' est√° vac√≠a."
          exit 1
        fi
        echo "‚úÖ La carpeta '${REPORTS_PATH}' existe y contiene archivos. Listando contenido:"
        ls -lahR "${REPORTS_PATH}"
        echo "REPORTS_PATH=${WORKSPACE_PATH}/${REPORTS_PATH}" >> "$GITHUB_ENV"

    # ----------------------------------------------------------------------------------------
    # Paso 3: Clonar (o crear) la rama de artefactos en la carpeta "artifacts-repo"
    # ----------------------------------------------------------------------------------------
    - name: "Clonar o crear la rama de artefactos"
      shell: bash
      env:
        GH_TOKEN: ${{ inputs.gh-token }}
        COMMIT_ID: ${{ github.sha }}
        BRANCH_NAME: ${{ github.ref_name }}
        REPO_NAME: ${{ github.repository }}
        ARTIFACTS_BRANCH: ${{ inputs.artifacts-branch }}
        WORKSPACE_PATH: ${{ github.workspace }}
      run: |
        set -e
        echo "‚ñ∂Ô∏è Iniciando clonaci√≥n o creaci√≥n de la rama '${ARTIFACTS_BRANCH}'"
        # Configurar Git
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
        git config --global user.name "github-actions[bot]"
        git config --global init.defaultBranch "${ARTIFACTS_BRANCH}"
        
        echo "üîé Verificando si la rama '${ARTIFACTS_BRANCH}' ya existe en remoto"
        BRANCH_EXISTS=$(git ls-remote --heads "https://x-access-token:${GH_TOKEN}@github.com/${REPO_NAME}.git" "${ARTIFACTS_BRANCH}")
        
        if [ -n "${BRANCH_EXISTS}" ]; then
          echo "‚úÖ La rama '${ARTIFACTS_BRANCH}' existe. Clon√°ndola en la carpeta 'artifacts-repo'."
          git clone --branch "${ARTIFACTS_BRANCH}" --single-branch "https://x-access-token:${GH_TOKEN}@github.com/${REPO_NAME}.git" "artifacts-repo"
        else
          echo "üÜï La rama '${ARTIFACTS_BRANCH}' NO existe. Cre√°ndola como rama hu√©rfana."
          mkdir -p "artifacts-repo"
          cd "artifacts-repo"
          git init
          git checkout --orphan "${ARTIFACTS_BRANCH}"
          git commit --allow-empty -m "Commit inicial para la rama ${ARTIFACTS_BRANCH}"
          git remote add origin "https://x-access-token:${GH_TOKEN}@github.com/${REPO_NAME}.git"
          git push --set-upstream origin "${ARTIFACTS_BRANCH}"
          cd ..
        fi
        echo "üìÅ Directorio final: $(pwd). Si existe 'artifacts-repo', se clon√≥ o se inicializ√≥."

    # ----------------------------------------------------------------------------------------
    # Paso 4: Copiar los reportes de cobertura desde la carpeta REPORTS_PATH (descargada o local)
    #         a 'artifacts-repo' y hacer commit de los artefactos.
    # ----------------------------------------------------------------------------------------
    - name: "Copiar cobertura y hacer commit"
      shell: bash
      env:
        GH_TOKEN: ${{ inputs.gh-token }}
        COMMIT_ID: ${{ github.sha }}
        BRANCH_NAME: ${{ github.ref_name }}
        REPO_NAME: ${{ github.repository }}
        ARTIFACTS_BRANCH: ${{ inputs.artifacts-branch }}
        WORKSPACE_PATH: ${{ github.workspace }}
      run: |
        set -e
        # Verificar que la variable REPORTS_PATH est√© definida (desde pasos anteriores)
        if [ -z "${REPORTS_PATH}" ]; then
          echo "‚ùå Error: La variable REPORTS_PATH no est√° definida."
          exit 1
        fi
        echo "Usando REPORTS_PATH=${REPORTS_PATH}"

        # Ubicarnos en la carpeta clonada de la rama de artefactos
        if [ -d "artifacts-repo" ]; then
          cd "artifacts-repo"
        else
          echo "‚ö†Ô∏è No se encontr√≥ 'artifacts-repo'. Revisar si hubo error previo en la clonaci√≥n."
          exit 1
        fi

        echo "‚ñ∂Ô∏è Creando directorios para guardar la cobertura en 'artifacts-repo'."
        mkdir -p "${BRANCH_NAME}/${COMMIT_ID}"
        mkdir -p "${BRANCH_NAME}/latest"

        echo "üîÄ Regresando a '${WORKSPACE_PATH}' para copiar la cobertura."
        cd "${WORKSPACE_PATH}"

        echo "üìÇ Copiando contenido de '${REPORTS_PATH}' a 'artifacts-repo/${BRANCH_NAME}/${COMMIT_ID}'"
        cp -r "${REPORTS_PATH}/." "${WORKSPACE_PATH}/artifacts-repo/${BRANCH_NAME}/${COMMIT_ID}/"
        cp -r "${REPORTS_PATH}/." "${WORKSPACE_PATH}/artifacts-repo/${BRANCH_NAME}/latest/"

        echo "‚úÖ Cobertura copiada. Preparando commit..."
        cd "${WORKSPACE_PATH}/artifacts-repo"

        echo "üìù Creando (o editando) README.md"
        echo "# Repositorio de Artefactos" > README.md
        echo "" >> README.md
        echo "Contiene reportes de test y otros artefactos del proyecto." >> README.md

        echo "üì¶ Agregando todos los cambios al staging."
        git add .

        COMMIT_MESSAGE="Agregar artefactos y README para commit ${COMMIT_ID} en la rama ${BRANCH_NAME}"
        echo "üì¶ Haciendo commit con mensaje: '${COMMIT_MESSAGE}'"
        git commit -m "${COMMIT_MESSAGE}" || echo "‚ö†Ô∏è No hay cambios nuevos que comitear."

        echo "üöÄ Haciendo push a la rama '${ARTIFACTS_BRANCH}'"
        git push origin "${ARTIFACTS_BRANCH}"

        echo "‚úÖ Artefactos subidos exitosamente a la rama '${ARTIFACTS_BRANCH}'."
